package red.felnull.ikenaichip8;

import java.util.Arrays;

public class Memory {
    private final Chip8 chip8;
    protected int[] memory = new int[1024 * 4];
    private final int[] fonts = new int[]{
            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
            0x20, 0x60, 0x20, 0x20, 0x70, // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
            0x90, 0x90, 0xF0, 0x10, 0x10, // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
            0xF0, 0x10, 0x20, 0x40, 0x40, // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90, // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
            0xF0, 0x80, 0x80, 0x80, 0xF0, // C
            0xE0, 0x90, 0x90, 0x90, 0xE0, // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
            0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };

    protected Memory(Chip8 chip8) {
        this.chip8 = chip8;
    }

    protected int read(int address) {
        return memory[address];
    }

    protected void init(byte[] rom) {
        Arrays.fill(memory, 0);
        System.arraycopy(fonts, 0, memory, 0, fonts.length);
        for (int i = 0; i < rom.length; i++) {
            memory[i + 512] = rom[i] & 0xFF;
        }
    }

    protected void write(int address, int value) {
        memory[address] = value;
    }
}
